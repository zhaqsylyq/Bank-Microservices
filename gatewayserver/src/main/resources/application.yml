spring:
  application:
    name: "gatewayserver"
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    gateway: # telling the gateway
      discovery: # please connect to the discovery server (eurekaserver)
        locator: # and locate all the details about the microservives to later forward external traffic to the individual microservices
          enabled: false # making it false disables the default uris, wanna leave just our custom eazybank/accounts , etc paths
          lower-case-service-id: true # So that we dont have to use capital letters inside the URI path: Instead of ACCOUNTS we can now use accounts/blah/blah
      httpclient: # Setting a global timeout (different from circuitBreakerTimeout which is like 1s by default before opting for the Fallback mechanism) for all the microservices that receive external traffic from the Gateway server
        connect-timeout: 1000 # 1sec to connect
        response-timeout: 10s
  data:
    redis:
      connect-timeout: 2s
      host: localhost
      port: 6379
      timeout: 1s
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: "http://localhost:7080/realms/master/protocol/openid-connect/certs"

management:
  endpoints:
    web:
      exposure:
        include: "*" #enable all the management related endpoints supported by the actuator, to enable refreshes of properties during runtime
  endpoint: #for enabling gateway related endpoints inside the actuator
    gateway:
      enabled: true
  info:
    env:
      enabled: true
  metrics: # Telling to group the metrics related to accounts ms under the application name(accounts)
    tags:
      application: ${spring.application.name}

info: # For the Eureka dashboard
  app:
    name: "gatewayserver"
    description: "Eazy Bank Gateway Server Application"
    version: "1.0.0"

logging:
  level:
    com:
      zhaksylyk:
        gatewayserver: DEBUG # print the logs inside the given package if they are of type DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default: # this means below properties are applicable for all kind of circuitbreakers inside the microservice; Can use different circuitbreaker names instead of this fo r indiviual properties, like use "accountsCircuitBreaker"
      slidingWindowSize: 10 #telling the circuitbreaker pattern how many requests it has to monitor before it tries to change the status to OPEN or to change status
      permittedNumberOfCallsInHalfOpenState: 2 #pretty clear
      failureRateThreshold: 50 #50% of requests fail => OPEN state
      waitDurationInOpenState: 10000 #miliseconds, wait 10 seconds before moving to the HALF-OPEN state