server:
  port: 8080
spring:
  application:
    name: "accounts"
  profiles:
    active: "prod"
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
  config:
    import: "optional:configserver:http://localhost:8071/"
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication
    stream:
      bindings:
        updateCommunication-in-0:
          destination: communication-sent
          group: ${spring.application.name}
        sendCommunication-out-0:
          destination: send-communication # exchange bound to the send-communication.message queue
      kafka:
        binder:
          brokers:
            - localhost:9092

management:
  endpoints:
    web:
      exposure:
        include: "*" #enable all the management related endpoints supported by the actuator, to enable refreshes of properties during runtime
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics: # Telling to group the metrics related to accounts ms under the application name(accounts)
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    prefer-ip-address: true #register with IP address
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

info: # For the Eureka dashboard
  app:
    name: "accounts"
    description: "Eazy Bank Accounts Application"
    version: "1.0.0"

logging:
  level:
    com:
      zhaksylyk:
        accounts: DEBUG # print the logs inside the given package if they are of type DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

resilience4j.circuitbreaker:
  configs:
    default: # this means below properties are applicable for all kind of circuitbreakers inside the microservice; Can use different circuitbreaker names instead of this fo r indiviual properties, like use "accountsCircuitBreaker"
      slidingWindowSize: 10 #telling the circuitbreaker pattern how many requests it has to monitor before it tries to change the status to OPEN or to change status
      permittedNumberOfCallsInHalfOpenState: 2 #pretty clear
      failureRateThreshold: 50 #50% of requests fail => OPEN state
      waitDurationInOpenState: 10000 #miliseconds, wait 10 seconds before moving to the HALF-OPEN state

resilience4j.retry:
  configs:
    default: # Could use 'getBuildInfo' if u wanna be more specific
      maxRetryAttempts: 3
      waitDuration: 500
      enableExponentialBackoff: true
      exponentialBackoffMultiplier: 2
      ignoreExceptions:
        - java.lang.NullPointerException
      retryExceptions:
        - java.util.concurrent.TimeoutException

resilience4j.ratelimiter:
  configs:
    default: # meaning for all the ratelimiter implementations inside the microservice
      timeoutDuration: 1000 # wait for 1sec, if the ratelimiter is still not allwing the request return back
      limitRefreshPeriod: 5000 # for every 5 seconds
      limitForPeriod: 1 # 1 request allowed